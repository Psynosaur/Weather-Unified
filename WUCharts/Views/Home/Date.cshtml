@using Newtonsoft.Json
@using WURequest.Models
@model List<WURequest.Models.Observations>


@{
    var cnt = Model.Select(x => true).Count();
    var latest = Model.LastOrDefault();
    // Sets nth record to use for plotting
    int nStep = 17;
    var graphPoints = Model.Where((x, i) => i % nStep == 0);
    // var graph2 = graph
    //     .Select(c =>
    //     {
    //         c.WindSpeedCur *= 3.6;
    //         c.WindGust10 *= 3.6;
    //         c.WindAvgSpeedCur *= 3.6;
    //         return c;
    //     });
    var observationses = graphPoints.ToList();
    var obj = observationses.Where(x => true).Select(o =>
        new
        {
            ObsTime = Convert.ToInt64((o.ObsTime - new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds),
            TempOutCur = Convert.ToDecimal(o.TempOutCur),
            TempInCur = Convert.ToDecimal(o.TempInCur),
            DewCur = Convert.ToDecimal(o.DewCur),
            Tmin = Convert.ToDecimal(o.Tmin),
            Tmax = Convert.ToDecimal(o.Tmax),
            HumOutCur = Convert.ToInt32(o.HumOutCur),
            HumInCur = Convert.ToInt32(o.HumInCur),
            PressCur = Convert.ToDecimal(o.PressCur),
            WindSpeedCur = Convert.ToDecimal(o.WindSpeedCur * 3.6),
            WindAvgSpeedCur = Convert.ToDecimal(o.WindAvgSpeedCur * 3.6),
            WindDirCur = Convert.ToInt32(o.WindDirCur),
            WindDirCurEng = o.WindDirCurEng,
            WindGust10 = Convert.ToDecimal(o.WindGust10 * 3.6),
            WindDirAvg10 = Convert.ToDecimal(o.WindDirAvg10),
            WindDirAvg10Eng = o.WindDirAvg10Eng,
            RainRateCur = Convert.ToDecimal(o.RainRateCur),
            RainDay = Convert.ToDecimal(o.RainDay),
            SolarRad = Convert.ToInt32(o.SolarRad),
            UV = Convert.ToInt32(o.UV)
        }).ToList();
    var rainobj = Model.Where(obs => obs.RainRateCur > 0).Select(o =>
        new RainObs
        {
            ObsTime = Convert.ToInt64((o.ObsTime - new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds),
            WindDirAvg10 = Convert.ToDecimal(o.WindDirAvg10),
            WindDirAvg10Eng = o.WindDirAvg10Eng,
            RainRateCur = Convert.ToDecimal(o.RainRateCur)
        }).ToList();
    var windobj = observationses.Where(obs => obs.WindSpeedCur > 0).Select(o =>
        new
        {
            WindDirCur = Convert.ToDecimal(o.WindDirCur),
            WindDirCurEng = o.WindDirCurEng,
            WindGust10 = Convert.ToDecimal(o.WindGust10 * 3.6),
            WindAvgSpeedCur = Convert.ToDecimal(o.WindAvgSpeedCur * 3.6),
            WindSpeedCur = Convert.ToDecimal(o.WindSpeedCur * 3.6)
        }).ToList();
    double sd = 0.0;
    string cloudyness = "";

    @if (latest != null)
    {
        if (Model.Any(x => x.SolarRad > 0))
        {
            var daylight = Model.Where(x => x.SolarRad > 0).ToList();
            var query = daylight.Select(x => x.SolarRad);
            IEnumerable<double> sunlight = query.ToList();
            double avg = sunlight.Average();
            double sumOfSquaresOfDifferences = sunlight.ToList().Select(val => (val - avg) * (val - avg)).Sum();
            sd = Math.Sqrt(sumOfSquaresOfDifferences / sunlight.Count());
        }
        if (sd >= 125 && sd <= 140)
        {
            cloudyness = "Party Cloudy Day";
        }
        if (sd >= 100 && sd <= 125)
        {
            cloudyness = "Cloudy Day";
        }
        if (sd >= 140)
        {
            cloudyness = "Sunny Day";
        }
        if (sd <= 100)
        {
            cloudyness = "Very Cloudy Day";
        }
    }
    // int nStepRain = 100;
    // var graphrain = Model.Where((x, i) => i % nStepRain == 0);
}

@section Scripts
{
    <script type="text/javascript">
                var hrs = 1;
                var objdata = @Html.Raw(JsonConvert.SerializeObject(obj));
                var raining = @rainobj.Count >0;
                if(raining){var raindata = @Html.Raw(JsonConvert.SerializeObject(rainobj));}
                var winddata = @Html.Raw(JsonConvert.SerializeObject(windobj));
                var std = '@sd';
                console.log("Std Deviation Solar : " + std);
    </script>
    <script type="text/javascript">
             flatpickr("#test", {
                                           
                   // enableTime: true,
                   minDate: "2019-07-20",
                   maxDate: "@DateTime.Now.ToString("yyyy-MM-dd")",
                   dateFormat: "Y-m-d",
                   onChange: function(selectedDates, dateStr, instance){
                                         window.location = '/date/' + dateStr;
                                         },
                    startDate: "@DateTime.Now.ToString("yyyy-MM-dd")"
                                         
                                                                    
                                                      
                                });
        
                         
                            
    </script>

}


@if (latest != null)
{
    <h1>Historical weather<br/>Stellenberg Durbanville</h1>
    <div class="row">
        <div class="column is-3">
            @* Date: <input id="timepick" data-date-format="yyyy-mm-dd" value="@latest.ObsTime.ToLocalTime().ToString("yyyy-MM-dd")"> *@
            <input id="test" class="flatpickr flatpickr-input active" type="text" placeholder="@latest.ObsTime.ToString("yyyy-MM-dd")" data-id="multipleCustomConjunction">
        </div>
        <div class="column is-3" style="text-align: center">
            <h2>@latest.ObsTime.ToLocalTime().ToString("ddd  dd MMM yyyy")</h2>
        </div>
        <div class="column is-3" style="text-align: center">
            <h3>@cloudyness</h3>
        </div>
    </div>
    <div class="columns is-0-mobile">
        @await Html.PartialAsync("_Stats", Model)
        @if (cnt > 0)
        {
            <div class="column is-8" id="middle">

                <div class="columns">
                    <div class="column is-half" id="chartemp" style="height:300px;"></div>
                    <div class="column is-half" id="chartminmax" style="height:300px;"></div>
                </div>
                <div class="columns">
                    <div class="column is-half" id="charthum" style="height:300px;"></div>
                    <div class="column is-half" id="chartpressure" style="height:300px;"></div>
                </div>
                <div class="columns">
                    <div class="column is-half" id="chartwind" style="height:300px;"></div>
                    <div class="column is-half" id="chartrain" style="height:300px;"></div>
                </div>
                <div class="columns">
                    <div class="column is-half" id="chartsolar" style="height:300px;"></div>
                    <div class="column is-half" id="chartuv" style="height:300px;"></div>
                </div>
                <div class="columns">
                    <div class="column is-full" id="chartwd" style="height:300px;"></div>
                </div>
                <div class="columns">
                    <div class="column is-third" id="chartTR" style="height:400px;"></div>
                    <div class="column is-third" id="chartPR" style="height:400px;"></div>
                    <div class="column is-third" id="chartHR" style="height:400px;"></div>
                </div>

            </div>
        }
        @await Html.PartialAsync("_DateSummary", Model)
    </div>
    <div class="row" style="text-align: center">
        <div class="col-lg">
            @cnt total records
        </div>
    </div>
}
else
{
    <div class="columns is-0-mobile">
        <div class="column">
             <input id="test" class="flatpickr flatpickr-input active" type="text" placeholder="@DateTime.Now.ToString("yyyy-MM-dd")" data-id="multipleCustomConjunction">
            @* Date: <input class="datepicker" data-date-format="yyyy-mm-dd" value="@DateTime.Now.ToString("yyyy-MM-dd")"> *@
        </div>
    </div>
    @await Html.PartialAsync("_error")
}


@* <style> *@
@* *@
@* #chartdiv { *@
@*   width: 100%; *@
@*   height: 500px; *@
@* } *@
@* *@
@* </style> *@
@* <script> *@
@* am4core.ready(function() { *@
@* *@
@* // Themes begin *@
@* *@
@* // Themes end *@
@* *@
@* /* Create chart instance */ *@
@* var chart = am4core.create("chartdiv", am4charts.RadarChart); *@
@* *@
@* /* Add data */ *@
@* // chart.data = [ { *@
@* //   "direction": "N", *@
@* //   "value": 8 *@
@* // }, { *@
@* //      "direction": "NNE", *@
@* //      "value": 8 *@
@* //    },{ *@
@* //   "direction": "NE", *@
@* //   "value": 9 *@
@* // },{ *@
@* //     "direction": "ENE", *@
@* //     "value": 8 *@
@* //   }, { *@
@* //   "direction": "E", *@
@* //   "value": 4.5 *@
@* // },{ *@
@* //     "direction": "ESE", *@
@* //     "value": 8 *@
@* //   }, { *@
@* //   "direction": "SE", *@
@* //   "value": 3.5 *@
@* // },{ *@
@* //     "direction": "SSE", *@
@* //     "value": 8 *@
@* //   }, { *@
@* //   "direction": "S", *@
@* //   "value": 9.2 *@
@* // },{ *@
@* //     "direction": "SSW", *@
@* //     "value": 8 *@
@* //   }, { *@
@* //   "direction": "SW", *@
@* //   "value": 8.4 *@
@* // },{ *@
@* //     "direction": "WSW", *@
@* //     "value": 8 *@
@* //   }, { *@
@* //   "direction": "W", *@
@* //   "value": 11.1 *@
@* // },{ *@
@* //     "direction": "WNW", *@
@* //     "value": 8 *@
@* //   }, { *@
@* //   "direction": "NW", *@
@* //   "value": 10 *@
@* // },{ *@
@* //     "direction": "NNW", *@
@* //     "value": 8 *@
@* //   }, ]; *@
@* *@
@* chart.data = modeldata; *@
@* *@
@* /* Create axes */ *@
@* var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis()); *@
@* categoryAxis.dataFields.category = "WindDirCurEng"; *@
@* *@
@* var valueAxis = chart.yAxes.push(new am4charts.ValueAxis()); *@
@* //valueAxis.renderer.gridType = "polygons"; *@
@* *@
@* /* Create and configure series */ *@
@* var series = chart.series.push(new am4charts.RadarSeries()); *@
@* series.dataFields.valueY = "WindSpeedCur"; *@
@* series.dataFields.categoryX = "WindDirCurEng"; *@
@* series.name = "Wind direction"; *@
@* series.data = modeldata; *@
@* series.strokeWidth = 3; *@
@* series.fillOpacity = 0.2; *@
@* *@
@* }); // end am4core.ready() *@
@* </script> *@
@* *@
@* <!-- HTML --> *@
@* <div id="chartdiv"></div> *@