@using Newtonsoft.Json
@using WURequest.Models
@model List<WURequest.Models.Observations>
@{
    var latest = Model.LastOrDefault();
    // Sets nth record to use for plotting
    int nStep = 17;
    var graph = Model.Where((x, i) => i % nStep == 0);
    // var graph2 = graph
    //     .Select(c =>
    //     {
    //         c.WindSpeedCur *= 3.6;
    //         c.WindGust10 *= 3.6;
    //         c.WindAvgSpeedCur *= 3.6;
    //         return c;
    //     });
    var observationses = graph.ToList();
    var obj = observationses.Where(x => true).Select(o =>
        new
        {
            ObsTime = Convert.ToInt64((o.ObsTime - new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds),
            TempOutCur = Convert.ToDecimal(o.TempOutCur),
            TempInCur = Convert.ToDecimal(o.TempInCur),
            DewCur = Convert.ToDecimal(o.DewCur),
            Tmin = Convert.ToDecimal(o.Tmin),
            Tmax = Convert.ToDecimal(o.Tmax),
            HumOutCur = Convert.ToInt32(o.HumOutCur),
            HumInCur = Convert.ToInt32(o.HumInCur),
            PressCur = Convert.ToDecimal(o.PressCur),
            WindSpeedCur = Convert.ToDecimal(o.WindSpeedCur * 3.6),
            WindAvgSpeedCur = Convert.ToDecimal(o.WindAvgSpeedCur * 3.6),
            WindDirCur = Convert.ToInt32(o.WindDirCur),
            WindDirCurEng = o.WindDirCurEng,
            WindGust10 = Convert.ToDecimal(o.WindGust10 * 3.6),
            WindDirAvg10 = Convert.ToDecimal(o.WindDirAvg10),
            WindDirAvg10Eng = o.WindDirAvg10Eng,
            RainRateCur = Convert.ToDecimal(o.RainRateCur),
            RainDay = Convert.ToDecimal(o.RainDay),
            SolarRad = Convert.ToInt32(o.SolarRad),
            UV = Convert.ToInt32(o.UV)
        }).ToList();
    var rainobj = Model.Where(obs => obs.RainRateCur > 0).Select(o =>
        new RainObs
        {
            ObsTime = Convert.ToInt64((o.ObsTime - new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds),
            WindDirAvg10 = Convert.ToDecimal(o.WindDirAvg10),
            WindDirAvg10Eng = o.WindDirAvg10Eng,
            RainRateCur = Convert.ToInt32(o.RainRateCur)
        }).ToList();
    var windobj = observationses.Where(obs => obs.WindSpeedCur > 0).Select(o =>
        new
        {
            WindDirCur = Convert.ToInt32(o.WindDirCur),
            WindDirCurEng = o.WindDirCurEng,
            WindGust10 = Convert.ToDecimal(o.WindGust10),
            WindAvgSpeedCur = Convert.ToDecimal(o.WindAvgSpeedCur),
            WindSpeedCur = Convert.ToDecimal(o.WindSpeedCur)
        }).ToList();
    // int nStepRain = 100;
    // var graphrain = Model.Where((x, i) => i % nStepRain == 0);
    var lastestHour = 0;
    if (latest != null)
    {
        lastestHour = latest.ObsTime.ToLocalTime().Hour;
    }
}
<div class="containerx col-lg-12 col-md-12 col-sm-12 ">
    @if (latest != null)
    {
        <h1>Daily weather data - Stellenberg Durbanville</h1>
        <div class="row">
            <div class="col-12" style="text-align: center">
                <strong> @latest.ObsTime.ToLocalTime().ToString("dddd  dd MMM yyyy - HH:mm:ss zzz")</strong><br/>
                <input class="timepicker timepicker-with-dropdown text-center">
            </div>
        </div>

        @await Html.PartialAsync("_DoubleGraph", Model)
        <script type="text/javascript">
            var hrs = 1;
            var objdata = @Html.Raw(JsonConvert.SerializeObject(obj));
            var raindata = @Html.Raw(JsonConvert.SerializeObject(rainobj));
            var winddata = @Html.Raw(JsonConvert.SerializeObject(windobj));
            var lh = @lastestHour;
        </script>
        @await Html.PartialAsync("_scripts")
        @await Html.PartialAsync("_timepicker")
    }
    else
    {
        @await Html.PartialAsync("_error")
    }
</div>