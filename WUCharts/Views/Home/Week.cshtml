@using Newtonsoft.Json
@model List<Observations>
@using Microsoft.Extensions.Options
@using WURequest.Models
@inject IOptions<AppSettings> _appSettings
@{
    var cnt = Model.Select(x => true).Count();
    var latest = Model.LastOrDefault();
    // Sets nth record to use for plotting
    int nStep = 100;
    var raing = Model.Where(obs => obs.RainRateCur > 0);
    var graphPoints = Model.Where((x, i) => i % nStep == 0);
    // var graph2 = graph
    //     .Select(c =>
    //     {
    //         c.WindSpeedCur *= 3.6;
    //         c.WindGust10 *= 3.6;
    //         c.WindAvgSpeedCur *= 3.6;
    //         return c;
    //     });
    var observations = graphPoints.ToList();
    var obj = observations.Where(x => true).Select(o =>
        new
        {
            ot = Convert.ToInt64((o.ObsTime - new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds),
            to = Convert.ToDecimal(o.TempOutCur),
            // TempInCur = Convert.ToDecimal(o.TempInCur),
            dc = Convert.ToDecimal(o.DewCur),
            tmn = Convert.ToDecimal(o.Tmin),
            tmx = Convert.ToDecimal(o.Tmax),
            ho = Convert.ToInt32(o.HumOutCur),
            hi = Convert.ToInt32(o.HumInCur),
            p = Convert.ToDecimal(o.PressCur),
            ws = Convert.ToDecimal(o.WindSpeedCur * 3.6),
            was = Convert.ToDecimal(o.WindAvgSpeedCur * 3.6),
            wd = Convert.ToInt32(o.WindDirCur),
            // ReSharper disable once RedundantAnonymousTypePropertyName - used in amcharts graphs
            wdce = o.WindDirCurEng,
            wg = Convert.ToDecimal(o.WindGust10 * 3.6),
            wda = Convert.ToDecimal(o.WindDirAvg10),
            // ReSharper disable once RedundantAnonymousTypePropertyName - used in amcharts graphs
            wdae = o.WindDirAvg10Eng,
            rr = Convert.ToDecimal(o.RainRateCur),
            rd = Convert.ToDecimal(o.RainDay),
            sr = Convert.ToInt32(o.SolarRad),
            UV = Convert.ToInt32(o.UV)
        }).ToList();
    var rainobj = Model.Where(obs => obs.RainRateCur > 0).Select(o =>
        new
        {
            // ObsTime = Convert.ToInt64((o.ObsTime - new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds),
            wda = Convert.ToDecimal(o.WindDirAvg10),
            // ReSharper disable once RedundantAnonymousTypePropertyName - used in amcharts graphs
            wdae = o.WindDirAvg10Eng,
            rr = Convert.ToDecimal(o.RainRateCur)
        }).ToList();
    var windobj = observations.Where(obs => obs.WindSpeedCur > 0).Select(o =>
        new
        {
            wd = Convert.ToDecimal(o.WindDirCur),
            // ReSharper disable once RedundantAnonymousTypePropertyName - used in amcharts graphs
            wdce = o.WindDirCurEng,
            wg = Convert.ToDecimal(o.WindGust10 * 3.6),
            was = Convert.ToDecimal(o.WindAvgSpeedCur * 3.6),
            ws = Convert.ToDecimal(o.WindSpeedCur * 3.6)
        }).ToList();
    // int nStepRain = 100;
    // var graphrain = Model.Where((x, i) => i % nStepRain == 0);
}

@section Scripts
{
    <script type="text/javascript">
                var hrs = 2;
                var objdata = @Html.Raw(JsonConvert.SerializeObject(obj));
                var raining = @rainobj.Count >0;
                if(raining){var raindata = @Html.Raw(JsonConvert.SerializeObject(rainobj));}
                var winddata = @Html.Raw(JsonConvert.SerializeObject(windobj));
     </script>
}

@if (latest != null)
{
    <h1>
        Weekly weather<br/>
        @_appSettings.Value.StationName
    </h1>
    <div class="columns has-text-light">
        <div class="column has-text-light" style="text-align: center">
            @latest.ObsTime.ToLocalTime().ToString("dddd dd MMM yyyy - HH:mm:ss zzz")
        </div>
    </div>
    @await Html.PartialAsync("_DoubleGraph", Model)
}
else
{
    @await Html.PartialAsync("_error")
}